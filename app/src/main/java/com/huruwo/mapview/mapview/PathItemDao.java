package com.huruwo.mapview.mapview;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATH_ITEM".
*/
public class PathItemDao extends AbstractDao<PathItem, Long> {

    public static final String TABLENAME = "PATH_ITEM";

    /**
     * Properties of entity PathItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xmlvalue = new Property(1, String.class, "xmlvalue", false, "XMLVALUE");
        public final static Property IsSelect = new Property(2, boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
        public final static Property Mapid = new Property(7, long.class, "mapid", false, "MAPID");
    }

    private Query<PathItem> mapBean_PathItemsQuery;

    public PathItemDao(DaoConfig config) {
        super(config);
    }
    
    public PathItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATH_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"XMLVALUE\" TEXT," + // 1: xmlvalue
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 2: isSelect
                "\"TITLE\" TEXT," + // 3: title
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"COLOR\" TEXT," + // 5: color
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"MAPID\" INTEGER NOT NULL );"); // 7: mapid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATH_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PathItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmlvalue = entity.getXmlvalue();
        if (xmlvalue != null) {
            stmt.bindString(2, xmlvalue);
        }
        stmt.bindLong(3, entity.getIsSelect() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getType());
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getMapid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PathItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmlvalue = entity.getXmlvalue();
        if (xmlvalue != null) {
            stmt.bindString(2, xmlvalue);
        }
        stmt.bindLong(3, entity.getIsSelect() ? 1L: 0L);
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getType());
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getMapid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PathItem readEntity(Cursor cursor, int offset) {
        PathItem entity = new PathItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xmlvalue
            cursor.getShort(offset + 2) != 0, // isSelect
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color
            cursor.getInt(offset + 6), // state
            cursor.getLong(offset + 7) // mapid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PathItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXmlvalue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsSelect(cursor.getShort(offset + 2) != 0);
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setMapid(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PathItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PathItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PathItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pathItems" to-many relationship of MapBean. */
    public List<PathItem> _queryMapBean_PathItems(long mapid) {
        synchronized (this) {
            if (mapBean_PathItemsQuery == null) {
                QueryBuilder<PathItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Mapid.eq(null));
                mapBean_PathItemsQuery = queryBuilder.build();
            }
        }
        Query<PathItem> query = mapBean_PathItemsQuery.forCurrentThread();
        query.setParameter(0, mapid);
        return query.list();
    }

}
